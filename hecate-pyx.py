#!/usr/bin/env python3
"""
H√©cate Pyx - Secret Management System
====================================
Sistema modular de gesti√≥n de secretos para arquitecturas SecOps/DevOps.

Caracter√≠sticas:
- Encriptaci√≥n AES-256 con PBKDF2
- M√∫ltiples tipos de autenticaci√≥n (SQL, Windows, Certificate, JWT, SSH Tunnel)
- 2FA/TOTP (Google Authenticator)
- API Keys para automatizaci√≥n
- Audit logging
- Connection pooling
- Backup/Restore

Uso:
    python hecate-pyx.py           # GUI
    python hecate-pyx.py --cli     # CLI
    python hecate-pyx.py --help    # Ayuda

Repositorio: https://github.com/aldomach/hecate-pyx
Documentaci√≥n: https://aldo.net.ar/hecate-pyx
Versi√≥n: 3.0
"""

import sys
import argparse
from pathlib import Path

# Agregar el directorio actual al path
sys.path.insert(0, str(Path(__file__).parent))

def check_dependencies():
    """Verificar dependencias b√°sicas y mostrar info sobre opcionales."""
    missing_basic = []
    missing_optional = []
    
    # Dependencias b√°sicas
    try:
        import pyodbc
    except ImportError:
        missing_basic.append("pyodbc")
    
    try:
        import cryptography
    except ImportError:
        missing_basic.append("cryptography")
    
    # Dependencias opcionales
    try:
        import pyotp
    except ImportError:
        missing_optional.append(("pyotp", "2FA/TOTP"))
    
    try:
        import qrcode
    except ImportError:
        missing_optional.append(("qrcode[pil]", "QR codes para 2FA"))
    
    try:
        import sshtunnel
    except ImportError:
        missing_optional.append(("sshtunnel", "T√∫neles SSH"))
    
    if missing_basic:
        print("‚ùå ERROR: Faltan dependencias b√°sicas obligatorias:")
        for dep in missing_basic:
            print(f"  - {dep}")
        print("\nüîß Para instalar:")
        print("  pip install pyodbc cryptography")
        print("  O ejecuta: python install_dependencies.py")
        return False
    
    if missing_optional:
        print("‚ö†Ô∏è  Dependencias opcionales no instaladas:")
        for dep, desc in missing_optional:
            print(f"  - {dep} ({desc})")
        print(f"\nüí° Estas caracter√≠sticas estar√°n deshabilitadas.")
        print(f"   Para instalar: pip install {' '.join([dep for dep, _ in missing_optional])}")
        print()
    
    return True

def main():
    """Punto de entrada principal."""
    parser = argparse.ArgumentParser(
        description="H√©cate Pyx v3.0 - Secret Management System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos:
  python hecate-pyx.py           # Abrir GUI
  python hecate-pyx.py --cli     # Usar CLI
  python hecate-pyx.py --help    # Esta ayuda

Caracter√≠sticas principales:
  ‚úÖ Encriptaci√≥n AES-256 con PBKDF2 (100k iteraciones)
  ‚úÖ M√∫ltiples tipos de autenticaci√≥n
  ‚úÖ 2FA/TOTP (Google Authenticator)
  ‚úÖ API Keys para scripts automatizados
  ‚úÖ Audit logging completo
  ‚úÖ Connection pooling
  ‚úÖ Backup/Restore seguro

Repositorio: https://github.com/aldomach/hecate-pyx
Documentaci√≥n: https://aldo.net.ar/hecate-pyx
        """
    )
    
    parser.add_argument(
        '--cli',
        action='store_true',
        help='Usar interfaz de l√≠nea de comandos en lugar de GUI'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='H√©cate Pyx v3.0 - Secret Management System'
    )
    
    args = parser.parse_args()
    
    print("=" * 70)
    print("H√©cate Pyx v3.0 - Secret Management System")
    print("=" * 70)
    print("\n‚ú® Caracter√≠sticas:")
    print("  ‚úÖ Encriptaci√≥n AES-256 con PBKDF2 (100k iteraciones)")
    print("  ‚úÖ M√∫ltiples tipos de autenticaci√≥n")
    print("  ‚úÖ 2FA/TOTP (Google Authenticator)")
    print("  ‚úÖ API Keys para scripts automatizados")
    print("  ‚úÖ Audit logging completo")
    print("  ‚úÖ Connection pooling")
    print("  ‚úÖ Backup/Restore seguro")
    print()
    
    # Verificar dependencias
    if not check_dependencies():
        sys.exit(1)
    
    # Crear directorios necesarios
    try:
        from hecate_pyx.core.config import ensure_directories
        ensure_directories()
    except ImportError as e:
        print(f"‚ùå Error al importar configuraci√≥n: {e}")
        sys.exit(1)
    
    if args.cli:
        print("üñ•Ô∏è  Iniciando interfaz CLI...\n")
        try:
            from hecate_pyx.cli import main as cli_main
            cli_main()
        except ImportError as e:
            print(f"‚ùå Error al cargar CLI: {e}")
            print("Verifica que todas las dependencias est√©n instaladas.")
            sys.exit(1)
    else:
        print("üöÄ Iniciando aplicaci√≥n GUI...\n")
        try:
            from hecate_pyx.gui.main_window import HecatePyxGUI
            app = HecatePyxGUI()
            app.run()
        except ImportError as e:
            print(f"‚ùå Error al cargar GUI: {e}")
            print("Verifica que todas las dependencias est√©n instaladas.")
            sys.exit(1)


if __name__ == "__main__":
    main()